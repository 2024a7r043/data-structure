//WAP to understand priority queue [Max priority queue]
#include<stdio.h>
#include<stdlib.h>
# define SIZE 100
typedef struct PriorityQueue
{
    int element;
    int priority;
} PriorityQueue;
PriorityQueue pq[SIZE];
int front = -1 , count = -1;
int isEmpty()
{
    return (front == -1) ? 1 : 0;
}
int isFull()
{
	return (count == SIZE - 1) ? 1 : 0;
}
void enqueue(int data, int priority)
{
    if (isEmpty())
    {
        count = count + 1;
        pq[count].element = data;
        pq[count].priority = priority;
        front = count;
    }
    else
    {
        int i;
        for (i = front; i <= count; i++)
        {
            if (pq[i].priority < priority)
            {
                for (int j = count; j >= i; j--)
                {
                    pq[j+1] = pq[j];
                }
                pq[i].element = data;
                pq[i].priority = priority;
                count++;
                break;
            }
        }
        if (i == count+1)
        {
            pq[i].element = data;
            pq[i].priority = priority;
            count++;
        }
    }
    printf("Element Inserted !!!\n");
}
int dequeue()
{
    int data = pq[front].element;
    if (front == count)
    {
        front = count = -1;
    }
    else
    {
        front++;
    }
    return data;
}
int peek()
{
    return pq[front].element;
}
int display()
{
    printf("Priority Queue elements are = \n");
    for (int i = front; i <=count; i++)
    {
        printf("Priority : %d Element : %d\n",pq[i].priority,pq[i].element);
    }
}
int main(){
    while(1)
    {
        printf("-----Priority Queue-----\n");
		printf("1. Enqueue\n");
		printf("2. Dequeue\n");
		printf("3. Peek\n");
		printf("4. Display\n");
		printf("5. Exit\n");
		int choice, data,p;
		printf("Enter choice : ");
		scanf("%d", &choice);
		switch(choice){
			case 1:
                if (isFull())
                {
                    printf("Queue Overflow !!!\n");
                }
                else
                {
                    printf("Enter Element = ");
                    scanf("%d",&data);
                    printf("Enter Priority = ");
                    scanf("%d",&p);
                    enqueue(data,p);
                }
				break;
			case 2:
                if (isEmpty())
                {
                    printf("Queue Underflow !!!\n");
                }
                else
                {
                    printf("%d is dequeue (removed) from the queue\n",dequeue());
                }
				break;
			case 3:
                 if (isEmpty())
                {
                    printf("Queue is empty !!!\n");
                }
                else
                {
                    printf("Element available in the front of queue is = %d\n",peek());
                }
				break;
			case 4:
                 if (isEmpty())
                {
                    printf("Queue is empty !!!\n");
                }
                else 
                {
                    display();
                }
				break;
			case 5:
				exit(0);
				break;
			default:
				printf("Invalid choice !!!!!\n");	
		}
		printf("\n\n");
		system("pause");
	}
	return 0;
}
